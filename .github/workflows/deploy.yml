name: Vercel Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test
      - name: Build React app
        run: npm run build
      
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Deploy to Vercel
        run: 
          npm install -g vercel --prod --yes --token ${{ secrets.VERCEL_TOKEN }}





        # Name

        # name: Vercel Deployment
        # This gives the workflow a name, "Vercel Deployment," which is displayed in the GitHub Actions UI.
        
        # Environment Variables
        
        # env:
        #   VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        #   VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        # env defines environment variables accessible throughout the workflow.
        # Secrets (${{ secrets.VERCEL_ORG_ID }} and ${{ secrets.VERCEL_PROJECT_ID }}):
        # VERCEL_ORG_ID: The organization ID in Vercel.
        # VERCEL_PROJECT_ID: The project ID in Vercel.
        # These are stored securely in GitHub Secrets to avoid exposing sensitive data.
        
        # Triggering Conditions
        
        # on:
        #   push:
        #     branches:
        #       - main
        #       - master
        # The workflow triggers on a push event to either the main or master branch.
        # Whenever code is committed or merged into these branches, the workflow runs.
        
        # Jobs
        
        # jobs:
        #   Deploy-Production:
        #     runs-on: ubuntu-latest
        # Deploy-Production: The job name, which is a logical grouping of tasks (steps).
        # runs-on: ubuntu-latest: Specifies the operating system for the virtual machine used by GitHub Actions (in this case, Ubuntu).
        
        # Steps
        
        # The steps define the sequential tasks executed as part of the job:
        
        
        # Step 1: Checkout Code
        # - uses: actions/checkout@v2
        # Uses the GitHub Action actions/checkout@v2 to pull the repository code into the virtual machine.
        
        # Step 2: Install Vercel CLI
        # - name: Install Vercel CLI
        #   run: npm install --global vercel@latest
        # Installs the latest version of the Vercel CLI globally using npm. This CLI tool is used for managing Vercel deployments programmatically.
        
        # Step 3: Pull Vercel Environment Information
        # - name: Pull Vercel Environment Information
        #   run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        # Syncs the local environment with the Vercel environment for the production environment.
        # Token: Uses the secure VERCEL_TOKEN secret to authenticate with Vercel.
        
        # Step 4: Build Project Artifacts
        # - name: Build Project Artifacts
        #   run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        # Builds the project locally using the vercel build command. This step compiles the project for production deployment.
        
        # Step 5: Deploy Project Artifacts
        # - name: Deploy Project Artifacts to Vercel
        #   run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        # Deploys the prebuilt project artifacts to Vercel using the vercel deploy command with the --prebuilt and --prod flags:
        # --prebuilt: Skips the build step during deployment since the build was already completed locally.
        # --prod: Deploys to the production environment.
        
        
        
        # And to get this workflow up and working on GitHub we just need to push up the .github folder with it's contents:
        
        # git add .
        # git commit -m "Add workflow for Vercel deployment"
        # git push origin master  # or the branch you're working on